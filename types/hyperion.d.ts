/*!
 * Asteria Hyperion Node Module
 * Copyright(c) 2019 Pascal ECHEMANN
 * Apache 2.0 Licensed
 * This is a part of the Asteria Project: <https://github.com/asteria-project>
 */

declare module "asteria-hyperion" {

import { AbstractAsteriaObject, StreamProcessConfig, AsteriaStream, AsteriaSession, AsteriaError } from "asteria-gaia";
import { CsvToListConfig, FilterConfig, LinesToListConfig, ListToCsvConfig, FileReaderConfig } from "asteria-cronos";
    
export class CsvToListConfigAdapter extends AbstractAsteriaObject implements HyperionConfigAdapter {    constructor();    convert(config: any): CsvToListConfig;}export class FilterConfigAdapter extends AbstractAsteriaObject implements HyperionConfigAdapter {    constructor();    convert(config: any): FilterConfig;}export class LinesToToListConfigAdapter extends AbstractAsteriaObject implements HyperionConfigAdapter {    constructor();    convert(config: any): LinesToListConfig;}export class ListToCsvConfigAdapter extends AbstractAsteriaObject implements HyperionConfigAdapter {    constructor();    convert(config: any): ListToCsvConfig;}export class FileReaderConfigAdapter extends AbstractAsteriaObject implements HyperionConfigAdapter {    constructor();    convert(config: any): FileReaderConfig;}export class FileWriterConfigAdapter extends AbstractAsteriaObject implements HyperionConfigAdapter {    constructor();    convert(config: any): FileReaderConfig;}export interface HyperionConfig {    name: string;    processes: Array<HyperionProcessConfig>;}export interface HyperionConfigAdapter {    convert(config: any): StreamProcessConfig;}export interface HyperionProcessConfig {    type: HyperionBaseProcessType | string;    config: any;}export class Hyperion extends AbstractAsteriaObject {    private readonly SESSION;    private readonly PROCESSOR;    private readonly VALIDATOR_MANAGER;    private constructor();    static build(config: HyperionConfig): Hyperion;    run(): AsteriaStream;    private initProcessor;}export class HyperionProcessor extends AbstractAsteriaObject {    private readonly SESSION;    constructor(session: AsteriaSession);    run(): AsteriaStream;    readFile(path: string): HyperionProcessor;    writeFile(path: string): HyperionProcessor;    csvToList(config: any): HyperionProcessor;    linesToList(config: any): HyperionProcessor;    listToCsv(config: any): HyperionProcessor;    filter(config: any): HyperionProcessor;    private addProcess;}export class HyperionBaseProcessDef {    private static readonly PROCESS_DEF;    static getProcessRef(type: string): string;}export enum HyperionBaseProcessType {    READ_FILE = "read-file",    WRITE_FILE = "write-file",    CSV_TO_LIST = "csv-to-list",    LINES_TO_LIST = "lines-to-list",    LIST_TO_CSV = "list-to-csv",    FILTER = "filter"}export enum HyperionCastRef {    STRING = "string",    NUMBER = "number",    BOOLEAN = "boolean"}export abstract class AbstractHyperionValidator extends AbstractAsteriaObject implements HyperionValidator {    constructor(className: string);    abstract validate(config: HyperionProcessConfig, result: (err: AsteriaError) => void): void;}export interface HyperionValidator {    validate(config: HyperionProcessConfig, result: (err: AsteriaError) => void): void;}export class HyperionValidatorManager extends AbstractAsteriaObject {    constructor();    private readonly VALIDATORS;    getValidator(type: string): HyperionValidator;}export class CsvToListValidator extends AbstractHyperionValidator implements HyperionValidator {    constructor();    validate(config: HyperionProcessConfig, result: (err: AsteriaError) => void): void;}export class FilterValidator extends AbstractHyperionValidator implements HyperionValidator {    constructor();    validate(config: HyperionProcessConfig, result: (err: AsteriaError) => void): void;}export class LinesToListValidator extends AbstractHyperionValidator implements HyperionValidator {    constructor();    validate(config: HyperionProcessConfig, result: (err: AsteriaError) => void): void;}export class ListToCsvValidator extends AbstractHyperionValidator implements HyperionValidator {    constructor();    validate(config: HyperionProcessConfig, result: (err: AsteriaError) => void): void;}export class ReadFileValidator extends AbstractHyperionValidator implements HyperionValidator {    constructor();    validate(config: HyperionProcessConfig, result: (err: AsteriaError) => void): void;}export class WriteFileValidator extends AbstractHyperionValidator implements HyperionValidator {    constructor();    validate(config: HyperionProcessConfig, result: (err: AsteriaError) => void): void;}}